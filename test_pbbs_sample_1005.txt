n = 1000000000
rounds = 6
num threads = 192
half length off
Testing out-of-place and stable sample-sort ... 
sample-sort (outplace and stable), uniform 10, pair<uint64, uint64>: r=6, med=0.898 (0.864,0.929), hlen=1e+09, Gelts/sec = 1.16
sample-sort (outplace and stable), uniform 100, pair<uint64, uint64>: r=6, med=0.95 (0.924,0.98), hlen=1e+09, Gelts/sec = 1.08
sample-sort (outplace and stable), uniform 1000, pair<uint64, uint64>: r=6, med=1.08 (1.03,1.1), hlen=1e+09, Gelts/sec = 0.969
sample-sort (outplace and stable), uniform 5000, pair<uint64, uint64>: r=6, med=1.32 (1.29,1.44), hlen=1e+09, Gelts/sec = 0.773
sample-sort (outplace and stable), uniform 7000, pair<uint64, uint64>: r=6, med=1.63 (1.54,1.75), hlen=1e+09, Gelts/sec = 0.65
sample-sort (outplace and stable), uniform 8000, pair<uint64, uint64>: r=6, med=1.67 (1.66,1.77), hlen=1e+09, Gelts/sec = 0.604
sample-sort (outplace and stable), uniform 10000, pair<uint64, uint64>: r=6, med=1.7 (1.65,1.81), hlen=1e+09, Gelts/sec = 0.605
sample-sort (outplace and stable), uniform 15000, pair<uint64, uint64>: r=6, med=1.81 (1.74,1.85), hlen=1e+09, Gelts/sec = 0.576
sample-sort (outplace and stable), uniform 20000, pair<uint64, uint64>: r=6, med=1.76 (1.74,1.85), hlen=1e+09, Gelts/sec = 0.574
sample-sort (outplace and stable), uniform 50000, pair<uint64, uint64>: r=6, med=1.73 (1.7,1.77), hlen=1e+09, Gelts/sec = 0.587
sample-sort (outplace and stable), uniform 100000, pair<uint64, uint64>: r=6, med=1.76 (1.64,1.77), hlen=1e+09, Gelts/sec = 0.61
sample-sort (outplace and stable), uniform 1000000, pair<uint64, uint64>: r=6, med=1.73 (1.71,1.79), hlen=1e+09, Gelts/sec = 0.585
sample-sort (outplace and stable), uniform 10000000, pair<uint64, uint64>: r=6, med=1.72 (1.65,1.77), hlen=1e+09, Gelts/sec = 0.605
sample-sort (outplace and stable), uniform 100000000, pair<uint64, uint64>: r=6, med=1.79 (1.74,1.87), hlen=1e+09, Gelts/sec = 0.574
sample-sort (outplace and stable), uniform 1000000000, pair<uint64, uint64>: r=6, med=1.81 (1.78,1.92), hlen=1e+09, Gelts/sec = 0.563
sample-sort (outplace and stable), exponential 1, pair<uint64, uint64>: r=6, med=0.951 (0.906,0.985), hlen=1e+09, Gelts/sec = 1.1
sample-sort (outplace and stable), exponential 0.001, pair<uint64, uint64>: r=6, med=1.19 (1.18,1.23), hlen=1e+09, Gelts/sec = 0.847
sample-sort (outplace and stable), exponential 0.0003, pair<uint64, uint64>: r=6, med=1.51 (1.47,1.57), hlen=1e+09, Gelts/sec = 0.681
sample-sort (outplace and stable), exponential 0.0002, pair<uint64, uint64>: r=6, med=1.63 (1.61,1.68), hlen=1e+09, Gelts/sec = 0.621
sample-sort (outplace and stable), exponential 0.00015, pair<uint64, uint64>: r=6, med=1.76 (1.72,1.81), hlen=1e+09, Gelts/sec = 0.583
sample-sort (outplace and stable), exponential 0.0001, pair<uint64, uint64>: r=6, med=1.78 (1.77,1.83), hlen=1e+09, Gelts/sec = 0.565
sample-sort (outplace and stable), exponential 0.00001, pair<uint64, uint64>: r=6, med=1.72 (1.7,1.81), hlen=1e+09, Gelts/sec = 0.589
sample-sort (outplace and stable), zipfian 10000, pair<uint64, uint64>: r=6, med=1.11 (1.1,1.12), hlen=1e+09, Gelts/sec = 0.911
sample-sort (outplace and stable), zipfian 100000, pair<uint64, uint64>: r=6, med=1.18 (1.17,1.19), hlen=1e+09, Gelts/sec = 0.858
sample-sort (outplace and stable), zipfian 1000000, pair<uint64, uint64>: r=6, med=1.26 (1.25,1.28), hlen=1e+09, Gelts/sec = 0.802
sample-sort (outplace and stable), zipfian 10000000, pair<uint64, uint64>: r=6, med=1.35 (1.33,1.38), hlen=1e+09, Gelts/sec = 0.749
sample-sort (outplace and stable), zipfian 100000000, pair<uint64, uint64>: r=6, med=1.41 (1.36,1.44), hlen=1e+09, Gelts/sec = 0.734
sample-sort (outplace and stable), zipfian 1000000000, pair<uint64, uint64>: r=6, med=1.4 (1.39,1.44), hlen=1e+09, Gelts/sec = 0.721
Testing out-of-place and unstable sample-sort ... 
sample-sort (outplace and unstable), uniform 10, pair<uint64, uint64>: r=6, med=0.718 (0.691,0.745), hlen=1e+09, Gelts/sec = 1.45
sample-sort (outplace and unstable), uniform 100, pair<uint64, uint64>: r=6, med=0.787 (0.746,0.836), hlen=1e+09, Gelts/sec = 1.34
sample-sort (outplace and unstable), uniform 1000, pair<uint64, uint64>: r=6, med=0.947 (0.918,0.956), hlen=1e+09, Gelts/sec = 1.09
sample-sort (outplace and unstable), uniform 5000, pair<uint64, uint64>: r=6, med=1.18 (1.16,1.23), hlen=1e+09, Gelts/sec = 0.864
sample-sort (outplace and unstable), uniform 7000, pair<uint64, uint64>: r=6, med=1.31 (1.29,1.36), hlen=1e+09, Gelts/sec = 0.775
sample-sort (outplace and unstable), uniform 8000, pair<uint64, uint64>: r=6, med=1.45 (1.4,1.46), hlen=1e+09, Gelts/sec = 0.713
sample-sort (outplace and unstable), uniform 10000, pair<uint64, uint64>: r=6, med=1.39 (1.36,1.46), hlen=1e+09, Gelts/sec = 0.738
sample-sort (outplace and unstable), uniform 15000, pair<uint64, uint64>: r=6, med=1.49 (1.44,1.54), hlen=1e+09, Gelts/sec = 0.695
sample-sort (outplace and unstable), uniform 20000, pair<uint64, uint64>: r=6, med=1.52 (1.5,1.55), hlen=1e+09, Gelts/sec = 0.667
sample-sort (outplace and unstable), uniform 50000, pair<uint64, uint64>: r=6, med=1.64 (1.58,1.69), hlen=1e+09, Gelts/sec = 0.632
sample-sort (outplace and unstable), uniform 100000, pair<uint64, uint64>: r=6, med=1.66 (1.63,1.72), hlen=1e+09, Gelts/sec = 0.613
sample-sort (outplace and unstable), uniform 1000000, pair<uint64, uint64>: r=6, med=1.67 (1.61,1.76), hlen=1e+09, Gelts/sec = 0.621
sample-sort (outplace and unstable), uniform 10000000, pair<uint64, uint64>: r=6, med=1.74 (1.72,1.78), hlen=1e+09, Gelts/sec = 0.58
sample-sort (outplace and unstable), uniform 100000000, pair<uint64, uint64>: r=6, med=1.87 (1.81,1.94), hlen=1e+09, Gelts/sec = 0.552
sample-sort (outplace and unstable), uniform 1000000000, pair<uint64, uint64>: r=6, med=1.93 (1.92,1.96), hlen=1e+09, Gelts/sec = 0.52
sample-sort (outplace and unstable), exponential 1, pair<uint64, uint64>: r=6, med=0.719 (0.664,0.749), hlen=1e+09, Gelts/sec = 1.51
sample-sort (outplace and unstable), exponential 0.001, pair<uint64, uint64>: r=6, med=1.13 (1.12,1.22), hlen=1e+09, Gelts/sec = 0.895
sample-sort (outplace and unstable), exponential 0.0003, pair<uint64, uint64>: r=6, med=1.31 (1.26,1.38), hlen=1e+09, Gelts/sec = 0.796
sample-sort (outplace and unstable), exponential 0.0002, pair<uint64, uint64>: r=6, med=1.45 (1.37,1.52), hlen=1e+09, Gelts/sec = 0.73
sample-sort (outplace and unstable), exponential 0.00015, pair<uint64, uint64>: r=6, med=1.47 (1.42,1.55), hlen=1e+09, Gelts/sec = 0.703
sample-sort (outplace and unstable), exponential 0.0001, pair<uint64, uint64>: r=6, med=1.5 (1.48,1.52), hlen=1e+09, Gelts/sec = 0.675
sample-sort (outplace and unstable), exponential 0.00001, pair<uint64, uint64>: r=6, med=1.66 (1.65,1.69), hlen=1e+09, Gelts/sec = 0.608
sample-sort (outplace and unstable), zipfian 10000, pair<uint64, uint64>: r=6, med=0.803 (0.792,0.837), hlen=1e+09, Gelts/sec = 1.26
sample-sort (outplace and unstable), zipfian 100000, pair<uint64, uint64>: r=6, med=0.937 (0.92,0.95), hlen=1e+09, Gelts/sec = 1.09
sample-sort (outplace and unstable), zipfian 1000000, pair<uint64, uint64>: r=6, med=1.05 (1.04,1.09), hlen=1e+09, Gelts/sec = 0.962
sample-sort (outplace and unstable), zipfian 10000000, pair<uint64, uint64>: r=6, med=1.16 (1.16,1.26), hlen=1e+09, Gelts/sec = 0.862
sample-sort (outplace and unstable), zipfian 100000000, pair<uint64, uint64>: r=6, med=1.26 (1.24,1.28), hlen=1e+09, Gelts/sec = 0.808
sample-sort (outplace and unstable), zipfian 1000000000, pair<uint64, uint64>: r=6, med=1.28 (1.23,1.29), hlen=1e+09, Gelts/sec = 0.812
Testing in-place and stable sample-sort ... 
sample-sort (inplace and stable), uniform 10, pair<uint64, uint64>: r=6, med=0.959 (0.929,0.978), hlen=1e+09, Gelts/sec = 1.08
sample-sort (inplace and stable), uniform 100, pair<uint64, uint64>: r=6, med=0.968 (0.947,0.985), hlen=1e+09, Gelts/sec = 1.06
sample-sort (inplace and stable), uniform 1000, pair<uint64, uint64>: r=6, med=0.969 (0.949,0.991), hlen=1e+09, Gelts/sec = 1.05
sample-sort (inplace and stable), uniform 5000, pair<uint64, uint64>: r=6, med=1.11 (1.09,1.19), hlen=1e+09, Gelts/sec = 0.914
sample-sort (inplace and stable), uniform 7000, pair<uint64, uint64>: r=6, med=1.29 (1.27,1.33), hlen=1e+09, Gelts/sec = 0.79
sample-sort (inplace and stable), uniform 8000, pair<uint64, uint64>: r=6, med=1.37 (1.35,1.41), hlen=1e+09, Gelts/sec = 0.739
sample-sort (inplace and stable), uniform 10000, pair<uint64, uint64>: r=6, med=1.43 (1.43,1.44), hlen=1e+09, Gelts/sec = 0.7
sample-sort (inplace and stable), uniform 15000, pair<uint64, uint64>: r=6, med=1.49 (1.46,1.51), hlen=1e+09, Gelts/sec = 0.685
sample-sort (inplace and stable), uniform 20000, pair<uint64, uint64>: r=6, med=1.52 (1.47,1.57), hlen=1e+09, Gelts/sec = 0.678
sample-sort (inplace and stable), uniform 50000, pair<uint64, uint64>: r=6, med=1.44 (1.41,1.49), hlen=1e+09, Gelts/sec = 0.711
sample-sort (inplace and stable), uniform 100000, pair<uint64, uint64>: r=6, med=1.39 (1.38,1.41), hlen=1e+09, Gelts/sec = 0.725
sample-sort (inplace and stable), uniform 1000000, pair<uint64, uint64>: r=6, med=1.39 (1.36,1.43), hlen=1e+09, Gelts/sec = 0.734
sample-sort (inplace and stable), uniform 10000000, pair<uint64, uint64>: r=6, med=1.45 (1.41,1.48), hlen=1e+09, Gelts/sec = 0.711
sample-sort (inplace and stable), uniform 100000000, pair<uint64, uint64>: r=6, med=1.52 (1.48,1.54), hlen=1e+09, Gelts/sec = 0.677
sample-sort (inplace and stable), uniform 1000000000, pair<uint64, uint64>: r=6, med=1.53 (1.5,1.53), hlen=1e+09, Gelts/sec = 0.667
sample-sort (inplace and stable), exponential 1, pair<uint64, uint64>: r=6, med=1.01 (0.976,1.02), hlen=1e+09, Gelts/sec = 1.02
sample-sort (inplace and stable), exponential 0.001, pair<uint64, uint64>: r=6, med=1.07 (1.05,1.09), hlen=1e+09, Gelts/sec = 0.955
sample-sort (inplace and stable), exponential 0.0003, pair<uint64, uint64>: r=6, med=1.27 (1.25,1.3), hlen=1e+09, Gelts/sec = 0.8
sample-sort (inplace and stable), exponential 0.0002, pair<uint64, uint64>: r=6, med=1.37 (1.36,1.4), hlen=1e+09, Gelts/sec = 0.734
sample-sort (inplace and stable), exponential 0.00015, pair<uint64, uint64>: r=6, med=1.44 (1.43,1.45), hlen=1e+09, Gelts/sec = 0.698
sample-sort (inplace and stable), exponential 0.0001, pair<uint64, uint64>: r=6, med=1.51 (1.49,1.54), hlen=1e+09, Gelts/sec = 0.672
sample-sort (inplace and stable), exponential 0.00001, pair<uint64, uint64>: r=6, med=1.41 (1.4,1.43), hlen=1e+09, Gelts/sec = 0.715
sample-sort (inplace and stable), zipfian 10000, pair<uint64, uint64>: r=6, med=1.1 (1.06,1.16), hlen=1e+09, Gelts/sec = 0.94
sample-sort (inplace and stable), zipfian 100000, pair<uint64, uint64>: r=6, med=1.15 (1.13,1.16), hlen=1e+09, Gelts/sec = 0.885
sample-sort (inplace and stable), zipfian 1000000, pair<uint64, uint64>: r=6, med=1.19 (1.16,1.2), hlen=1e+09, Gelts/sec = 0.864
sample-sort (inplace and stable), zipfian 10000000, pair<uint64, uint64>: r=6, med=1.24 (1.21,1.28), hlen=1e+09, Gelts/sec = 0.827
sample-sort (inplace and stable), zipfian 100000000, pair<uint64, uint64>: r=6, med=1.26 (1.23,1.28), hlen=1e+09, Gelts/sec = 0.811
sample-sort (inplace and stable), zipfian 1000000000, pair<uint64, uint64>: r=6, med=1.27 (1.24,1.3), hlen=1e+09, Gelts/sec = 0.805
Testing in-place and unstable sample-sort ... 
sample-sort (inplace and unstable), uniform 10, pair<uint64, uint64>: r=6, med=0.8 (0.774,0.812), hlen=1e+09, Gelts/sec = 1.29
sample-sort (inplace and unstable), uniform 100, pair<uint64, uint64>: r=6, med=0.871 (0.826,0.875), hlen=1e+09, Gelts/sec = 1.21
sample-sort (inplace and unstable), uniform 1000, pair<uint64, uint64>: r=6, med=0.928 (0.899,0.939), hlen=1e+09, Gelts/sec = 1.11
sample-sort (inplace and unstable), uniform 5000, pair<uint64, uint64>: r=6, med=1.04 (1.02,1.07), hlen=1e+09, Gelts/sec = 0.981
sample-sort (inplace and unstable), uniform 7000, pair<uint64, uint64>: r=6, med=1.12 (1.09,1.16), hlen=1e+09, Gelts/sec = 0.92
sample-sort (inplace and unstable), uniform 8000, pair<uint64, uint64>: r=6, med=1.11 (1.1,1.12), hlen=1e+09, Gelts/sec = 0.912
sample-sort (inplace and unstable), uniform 10000, pair<uint64, uint64>: r=6, med=1.15 (1.13,1.19), hlen=1e+09, Gelts/sec = 0.887
sample-sort (inplace and unstable), uniform 15000, pair<uint64, uint64>: r=6, med=1.23 (1.2,1.24), hlen=1e+09, Gelts/sec = 0.832
sample-sort (inplace and unstable), uniform 20000, pair<uint64, uint64>: r=6, med=1.23 (1.22,1.28), hlen=1e+09, Gelts/sec = 0.818
sample-sort (inplace and unstable), uniform 50000, pair<uint64, uint64>: r=6, med=1.35 (1.33,1.39), hlen=1e+09, Gelts/sec = 0.753
sample-sort (inplace and unstable), uniform 100000, pair<uint64, uint64>: r=6, med=1.38 (1.36,1.43), hlen=1e+09, Gelts/sec = 0.733
sample-sort (inplace and unstable), uniform 1000000, pair<uint64, uint64>: r=6, med=1.4 (1.38,1.4), hlen=1e+09, Gelts/sec = 0.727
sample-sort (inplace and unstable), uniform 10000000, pair<uint64, uint64>: r=6, med=1.48 (1.47,1.51), hlen=1e+09, Gelts/sec = 0.682
sample-sort (inplace and unstable), uniform 100000000, pair<uint64, uint64>: r=6, med=1.62 (1.6,1.65), hlen=1e+09, Gelts/sec = 0.626
sample-sort (inplace and unstable), uniform 1000000000, pair<uint64, uint64>: r=6, med=1.66 (1.64,1.69), hlen=1e+09, Gelts/sec = 0.608
sample-sort (inplace and unstable), exponential 1, pair<uint64, uint64>: r=6, med=0.766 (0.76,0.786), hlen=1e+09, Gelts/sec = 1.32
sample-sort (inplace and unstable), exponential 0.001, pair<uint64, uint64>: r=6, med=1.03 (0.987,1.07), hlen=1e+09, Gelts/sec = 1.01
sample-sort (inplace and unstable), exponential 0.0003, pair<uint64, uint64>: r=6, med=1.11 (1.09,1.12), hlen=1e+09, Gelts/sec = 0.92
sample-sort (inplace and unstable), exponential 0.0002, pair<uint64, uint64>: r=6, med=1.18 (1.16,1.23), hlen=1e+09, Gelts/sec = 0.863
sample-sort (inplace and unstable), exponential 0.00015, pair<uint64, uint64>: r=6, med=1.23 (1.2,1.24), hlen=1e+09, Gelts/sec = 0.837
sample-sort (inplace and unstable), exponential 0.0001, pair<uint64, uint64>: r=6, med=1.27 (1.24,1.34), hlen=1e+09, Gelts/sec = 0.805
sample-sort (inplace and unstable), exponential 0.00001, pair<uint64, uint64>: r=6, med=1.37 (1.35,1.41), hlen=1e+09, Gelts/sec = 0.741
sample-sort (inplace and unstable), zipfian 10000, pair<uint64, uint64>: r=6, med=0.83 (0.807,0.837), hlen=1e+09, Gelts/sec = 1.24
sample-sort (inplace and unstable), zipfian 100000, pair<uint64, uint64>: r=6, med=0.893 (0.89,0.914), hlen=1e+09, Gelts/sec = 1.12
sample-sort (inplace and unstable), zipfian 1000000, pair<uint64, uint64>: r=6, med=1 (0.981,1.03), hlen=1e+09, Gelts/sec = 1.02
sample-sort (inplace and unstable), zipfian 10000000, pair<uint64, uint64>: r=6, med=1.1 (1.08,1.14), hlen=1e+09, Gelts/sec = 0.923
sample-sort (inplace and unstable), zipfian 100000000, pair<uint64, uint64>: r=6, med=1.15 (1.11,1.17), hlen=1e+09, Gelts/sec = 0.901
sample-sort (inplace and unstable), zipfian 1000000000, pair<uint64, uint64>: r=6, med=1.15 (1.14,1.16), hlen=1e+09, Gelts/sec = 0.877
