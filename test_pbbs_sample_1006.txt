n = 1000000000
rounds = 6
num threads = 192
half length off
Testing in-place and stable sample-sort ... 
sample-sort (inplace and stable), uniform 10, pair<uint64, uint64>: r=6, med=0.944 (0.923,0.972), hlen=1e+09, Gelts/sec = 1.08
sample-sort (inplace and stable), uniform 100, pair<uint64, uint64>: r=6, med=0.985 (0.964,1.03), hlen=1e+09, Gelts/sec = 1.04
sample-sort (inplace and stable), uniform 1000, pair<uint64, uint64>: r=6, med=1.01 (1,1.04), hlen=1e+09, Gelts/sec = 0.997
sample-sort (inplace and stable), uniform 5000, pair<uint64, uint64>: r=6, med=1.11 (1.07,1.17), hlen=1e+09, Gelts/sec = 0.932
sample-sort (inplace and stable), uniform 7000, pair<uint64, uint64>: r=6, med=1.28 (1.26,1.29), hlen=1e+09, Gelts/sec = 0.794
sample-sort (inplace and stable), uniform 8000, pair<uint64, uint64>: r=6, med=1.36 (1.32,1.41), hlen=1e+09, Gelts/sec = 0.758
sample-sort (inplace and stable), uniform 10000, pair<uint64, uint64>: r=6, med=1.41 (1.38,1.44), hlen=1e+09, Gelts/sec = 0.726
sample-sort (inplace and stable), uniform 15000, pair<uint64, uint64>: r=6, med=1.48 (1.46,1.51), hlen=1e+09, Gelts/sec = 0.685
sample-sort (inplace and stable), uniform 20000, pair<uint64, uint64>: r=6, med=1.48 (1.47,1.5), hlen=1e+09, Gelts/sec = 0.681
sample-sort (inplace and stable), uniform 50000, pair<uint64, uint64>: r=6, med=1.42 (1.4,1.45), hlen=1e+09, Gelts/sec = 0.713
sample-sort (inplace and stable), uniform 100000, pair<uint64, uint64>: r=6, med=1.42 (1.41,1.46), hlen=1e+09, Gelts/sec = 0.711
sample-sort (inplace and stable), uniform 1000000, pair<uint64, uint64>: r=6, med=1.38 (1.36,1.41), hlen=1e+09, Gelts/sec = 0.734
sample-sort (inplace and stable), uniform 10000000, pair<uint64, uint64>: r=6, med=1.42 (1.38,1.45), hlen=1e+09, Gelts/sec = 0.723
sample-sort (inplace and stable), uniform 100000000, pair<uint64, uint64>: r=6, med=1.49 (1.48,1.5), hlen=1e+09, Gelts/sec = 0.676
sample-sort (inplace and stable), uniform 1000000000, pair<uint64, uint64>: r=6, med=1.5 (1.49,1.56), hlen=1e+09, Gelts/sec = 0.669
sample-sort (inplace and stable), exponential 1, pair<uint64, uint64>: r=6, med=1.03 (1,1.04), hlen=1e+09, Gelts/sec = 1
sample-sort (inplace and stable), exponential 0.001, pair<uint64, uint64>: r=6, med=1.08 (1.05,1.13), hlen=1e+09, Gelts/sec = 0.95
sample-sort (inplace and stable), exponential 0.0003, pair<uint64, uint64>: r=6, med=1.26 (1.25,1.29), hlen=1e+09, Gelts/sec = 0.801
sample-sort (inplace and stable), exponential 0.0002, pair<uint64, uint64>: r=6, med=1.36 (1.35,1.37), hlen=1e+09, Gelts/sec = 0.743
sample-sort (inplace and stable), exponential 0.00015, pair<uint64, uint64>: r=6, med=1.46 (1.41,1.48), hlen=1e+09, Gelts/sec = 0.708
sample-sort (inplace and stable), exponential 0.0001, pair<uint64, uint64>: r=6, med=1.47 (1.46,1.52), hlen=1e+09, Gelts/sec = 0.685
sample-sort (inplace and stable), exponential 0.00001, pair<uint64, uint64>: r=6, med=1.39 (1.37,1.41), hlen=1e+09, Gelts/sec = 0.73
sample-sort (inplace and stable), zipfian 10000, pair<uint64, uint64>: r=6, med=1.09 (1.08,1.12), hlen=1e+09, Gelts/sec = 0.923
sample-sort (inplace and stable), zipfian 100000, pair<uint64, uint64>: r=6, med=1.14 (1.11,1.22), hlen=1e+09, Gelts/sec = 0.902
sample-sort (inplace and stable), zipfian 1000000, pair<uint64, uint64>: r=6, med=1.15 (1.15,1.2), hlen=1e+09, Gelts/sec = 0.871
sample-sort (inplace and stable), zipfian 10000000, pair<uint64, uint64>: r=6, med=1.22 (1.19,1.25), hlen=1e+09, Gelts/sec = 0.838
sample-sort (inplace and stable), zipfian 100000000, pair<uint64, uint64>: r=6, med=1.24 (1.21,1.26), hlen=1e+09, Gelts/sec = 0.826
sample-sort (inplace and stable), zipfian 1000000000, pair<uint64, uint64>: r=6, med=1.23 (1.21,1.27), hlen=1e+09, Gelts/sec = 0.825
Testing in-place and unstable sample-sort ... 
sample-sort (inplace and unstable), uniform 10, pair<uint64, uint64>: r=6, med=0.77 (0.752,0.813), hlen=1e+09, Gelts/sec = 1.33
sample-sort (inplace and unstable), uniform 100, pair<uint64, uint64>: r=6, med=0.82 (0.807,0.859), hlen=1e+09, Gelts/sec = 1.24
sample-sort (inplace and unstable), uniform 1000, pair<uint64, uint64>: r=6, med=0.905 (0.886,0.938), hlen=1e+09, Gelts/sec = 1.13
sample-sort (inplace and unstable), uniform 5000, pair<uint64, uint64>: r=6, med=1.03 (0.983,1.06), hlen=1e+09, Gelts/sec = 1.02
sample-sort (inplace and unstable), uniform 7000, pair<uint64, uint64>: r=6, med=1.07 (1.04,1.09), hlen=1e+09, Gelts/sec = 0.96
sample-sort (inplace and unstable), uniform 8000, pair<uint64, uint64>: r=6, med=1.08 (1.07,1.09), hlen=1e+09, Gelts/sec = 0.931
sample-sort (inplace and unstable), uniform 10000, pair<uint64, uint64>: r=6, med=1.12 (1.11,1.16), hlen=1e+09, Gelts/sec = 0.902
sample-sort (inplace and unstable), uniform 15000, pair<uint64, uint64>: r=6, med=1.2 (1.19,1.25), hlen=1e+09, Gelts/sec = 0.838
sample-sort (inplace and unstable), uniform 20000, pair<uint64, uint64>: r=6, med=1.22 (1.21,1.23), hlen=1e+09, Gelts/sec = 0.828
sample-sort (inplace and unstable), uniform 50000, pair<uint64, uint64>: r=6, med=1.3 (1.3,1.33), hlen=1e+09, Gelts/sec = 0.771
sample-sort (inplace and unstable), uniform 100000, pair<uint64, uint64>: r=6, med=1.34 (1.31,1.36), hlen=1e+09, Gelts/sec = 0.763
sample-sort (inplace and unstable), uniform 1000000, pair<uint64, uint64>: r=6, med=1.37 (1.35,1.4), hlen=1e+09, Gelts/sec = 0.741
sample-sort (inplace and unstable), uniform 10000000, pair<uint64, uint64>: r=6, med=1.44 (1.41,1.46), hlen=1e+09, Gelts/sec = 0.712
sample-sort (inplace and unstable), uniform 100000000, pair<uint64, uint64>: r=6, med=1.58 (1.57,1.6), hlen=1e+09, Gelts/sec = 0.639
sample-sort (inplace and unstable), uniform 1000000000, pair<uint64, uint64>: r=6, med=1.63 (1.61,1.63), hlen=1e+09, Gelts/sec = 0.622
sample-sort (inplace and unstable), exponential 1, pair<uint64, uint64>: r=6, med=0.753 (0.743,0.766), hlen=1e+09, Gelts/sec = 1.35
sample-sort (inplace and unstable), exponential 0.001, pair<uint64, uint64>: r=6, med=0.972 (0.952,1), hlen=1e+09, Gelts/sec = 1.05
sample-sort (inplace and unstable), exponential 0.0003, pair<uint64, uint64>: r=6, med=1.08 (1.06,1.09), hlen=1e+09, Gelts/sec = 0.946
sample-sort (inplace and unstable), exponential 0.0002, pair<uint64, uint64>: r=6, med=1.15 (1.14,1.19), hlen=1e+09, Gelts/sec = 0.875
sample-sort (inplace and unstable), exponential 0.00015, pair<uint64, uint64>: r=6, med=1.18 (1.16,1.23), hlen=1e+09, Gelts/sec = 0.859
sample-sort (inplace and unstable), exponential 0.0001, pair<uint64, uint64>: r=6, med=1.24 (1.21,1.31), hlen=1e+09, Gelts/sec = 0.829
sample-sort (inplace and unstable), exponential 0.00001, pair<uint64, uint64>: r=6, med=1.33 (1.33,1.35), hlen=1e+09, Gelts/sec = 0.754
sample-sort (inplace and unstable), zipfian 10000, pair<uint64, uint64>: r=6, med=0.809 (0.798,0.862), hlen=1e+09, Gelts/sec = 1.25
sample-sort (inplace and unstable), zipfian 100000, pair<uint64, uint64>: r=6, med=0.908 (0.851,0.945), hlen=1e+09, Gelts/sec = 1.18
sample-sort (inplace and unstable), zipfian 1000000, pair<uint64, uint64>: r=6, med=0.967 (0.954,0.972), hlen=1e+09, Gelts/sec = 1.05
sample-sort (inplace and unstable), zipfian 10000000, pair<uint64, uint64>: r=6, med=1.07 (1.02,1.12), hlen=1e+09, Gelts/sec = 0.982
sample-sort (inplace and unstable), zipfian 100000000, pair<uint64, uint64>: r=6, med=1.11 (1.09,1.14), hlen=1e+09, Gelts/sec = 0.916
sample-sort (inplace and unstable), zipfian 1000000000, pair<uint64, uint64>: r=6, med=1.1 (1.09,1.11), hlen=1e+09, Gelts/sec = 0.919
